// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------
{{ generation_block }}

#ifndef XPCC_{{target.family | upper}}_UART_SPI_MASTER{{id}}_HPP
#define XPCC_{{target.family | upper}}_UART_SPI_MASTER{{id}}_HPP

#include "../../uart/at90_tiny_mega/uart_defines.h"
#include <xpcc/architecture/interface/spi_master.hpp>
#include "type_ids.hpp"

namespace xpcc
{

namespace {{target.family}}
{

/**
 * Implementation of the SimpleSpi of the Uart in Spi Master mode.
 *
 * @ingroup		{{target.string}}_spi
 * @author		Niklas Hauser
 */
class UartSpiMaster{{ id }} : public ::xpcc::SpiMaster
{
	static uint8_t state;
	static void *context;
public:
	static const TypeId::UartSpiMaster{{ id }}Mosi Mosi;
	static const TypeId::UartSpiMaster{{ id }}Miso Miso;
	static const TypeId::UartSpiMaster{{ id }}Sck  Sck;

	/// Spi Data Mode, Mode0 is the most common mode
%% if extended is not defined
	/// @warning 	Only Mode 0 and 2 are available, Mode 1 and 3 are not
	///				supported on this target.
%% endif
	enum class
	DataMode : uint8_t
	{
		Mode0 = 0,	///< clock normal,   sample on rising  edge
%% if extended is defined
		Mode1 = (1 << UCPHA{{ id }}),	///< clock normal,   sample on falling edge
%% endif
		Mode2 = (1 << UCPOL{{ id }}),	///< clock inverted, sample on falling edge
%% if extended is defined
		Mode3 = (1 << UCPOL{{ id }}) | (1 << UCPHA{{ id }}),
		///< clock inverted, sample on rising edge
%% endif
	};

	/// Spi Data Order, MsbFirst is the most common mode
	enum class
	DataOrder : uint8_t
	{
		MsbFirst = 0,
%% if extended is defined
		LsbFirst = (1 << UDORD{{ id }}),
%% else
		LsbFirst = 1,
%% endif
	};

public:
	// start documentation inherited
	template< class clockSource, uint32_t baudrate,
			uint16_t tolerance = xpcc::Tolerance::FivePercent >
	static inline void
	initialize()
	{
		// calculate the fractional prescaler value
		constexpr float pre_raw = static_cast<float>(clockSource::UsartSpi) / ( 2 * baudrate );
		// respect the prescaler range of 1 to 4096
		constexpr uint32_t pre_ceil = std::ceil(pre_raw) > 4096 ? 4096 : std::ceil(pre_raw);
		constexpr uint32_t pre_floor = std::floor(pre_raw) < 1 ? 1 : std::floor(pre_raw);

		// calculate the possible baudrates above and below the requested baudrate
		constexpr uint32_t baud_lower = clockSource::UsartSpi / ( 2 * pre_ceil );
		constexpr uint32_t baud_upper = clockSource::UsartSpi / ( 2 * pre_floor );

		// calculate the fractional prescaler value corresponding to the baudrate exactly
		// between the upper and lower baudrate
		constexpr float pre_middle = static_cast<float>(clockSource::UsartSpi) /
				( 2 * ((baud_upper - baud_lower) / 2.f + baud_lower) );
		// decide which prescaler value is closer to a possible baudrate
		constexpr uint16_t prescaler = (pre_raw >= pre_middle) ? pre_ceil : pre_floor;

		// check if within baudrate tolerance
		constexpr uint32_t generated_baudrate = clockSource::UsartSpi / (2 * prescaler);
		assertBaudrateInTolerance<
			/* clostest available baudrate */ generated_baudrate,
			/* desired baudrate */ baudrate,
			tolerance >();

		initialize(prescaler - 1);
	}


	static inline void
	setDataMode(DataMode mode)
	{
%% if extended is defined
		UCSR{{ id }}C = (UCSR{{ id }}C & ~((1 << UCPOL{{ id }}) | (1 << UCPHA{{ id }}))) | static_cast<uint8_t>(mode);
%% else
		UCSR{{ id }}C = (UCSR{{ id }}C & ~(1 << UCPOL{{ id }})) | static_cast<uint8_t>(mode);
%% endif
	}

%% if extended is not defined
	/// @warning 	On this target, only `DataOrder::MsbFirst` is natively
	///				supported!
	///				`DataOrder::LsbFirst` is reimplemented in software using
	///				xpcc::bitReverse(), which is quite costly.
	/// @see	xpcc::bitReverse()
%% endif
	static inline void
	setDataOrder(DataOrder order)
	{
%% if extended is defined
		UCSR{{id}}C = (UCSR{{id}}C & ~(1 << UDORD{{id}})) | static_cast<uint8_t>(order);
%% else
		dataOrder = order;
%% endif
	}


	static uint8_t
	aquire(void *ctx);

	static uint8_t
	release(void *ctx);


	static uint8_t
	transferBlocking(uint8_t data)
	{
		return CO_CALL_BLOCKING(transfer(data));
	}

	static void
	transferBlocking(uint8_t *tx, uint8_t *rx, std::size_t length)
	{
		CO_CALL_BLOCKING(transfer(tx, rx, length));
	}


	static xpcc::co::Result<uint8_t>
	transfer(uint8_t data);

	static xpcc::co::Result<void>
	transfer(uint8_t *tx, uint8_t *rx, std::size_t length);
	// end documentation inherited

protected:
	static void
	initialize(uint16_t prescaler);

private:
%% if extended is not defined
	static DataOrder dataOrder;
%% endif
};

} // namespace {{target.family}}

} // namespace xpcc

#endif // XPCC_{{target.family | upper}}_UART_SPI_MASTER{{id}}_HPP
